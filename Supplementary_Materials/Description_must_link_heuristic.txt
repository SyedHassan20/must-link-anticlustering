

2PML (2 phase must-link algorithm). 

First phase: A straight forward adaptation of the LCW local maximum method to must-link constraints.
(Explain as is currently in the paper)

Second phase: Improvement phase that drops the restriction of performing exchanges among must-link cliques of the same cardinality. It iterates through all must-link cliques and for each clique, selects a combination of samples for exchange. The combination of samples is chosen in such a way that (a) the must-link constraints are preserved, (b) all samples are part of the same batch, and (c) the number of samples is equal to the size of the current clique. Among all combinations of samples that fit these requirements, a random combination is chosen. If no feasible combination is found, the next clique is evaluated. For example, for a clique of size 5, we might select five independent samples for exchange, a combination of a clique of size 2 and 3, or a clique of size 4 and a single independent sample. Exchanges that do not lead to an improvement in diversity are discarded, while exchanges that do lead to an improvement in diversity are conducted. After iterating through all cliques, the improved batch assignment is once again used as input for the local-maximum search from phase 1. That is because---maybe counterintuitively---while the new assignment is likely improved over the initial assignment that we got from phase 1, it may no longer be locally optimal, and can therefore be restored to local optimality for an additional improvement. The idea of restoring local optimality of a perturbed assignment is inspired by the iterated local search (ILS) approach by Brusco et al. 

Both phases of 2PML can be called repeatedly as part of a multiple restart algorithm. In anticlust, when users specify multiple restarts, half of the restarts will perform the first phase, and the other half will perform the second phase. The best assignment across all restarts in phase 1 is used as input for phase 2. Phase 2 builds on the locally optimal assignment from phase 1 to conduct the improvement phase. The second iteration of phase 2 will again perform an improvement phase using the assignment of the first iteration as input; this process is repeated until all user-defined restarts are conducted. 
